[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\admin\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\admin\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 16.0.1)
[debug]       Load.loadUnit: plugins took 141.876655ms
[debug]       Load.loadUnit: defsScala took 0.551066ms
[debug] [Loading] Scanning directory C:\Users\admin\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\admin\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 36.646409 ms
[debug]           Load.resolveProject(global-plugins) took 73.444752ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\admin\.sbt\1.0\plugins, plugins: List(<none>))) took 136.200866ms
[debug] [Loading] Done in C:\Users\admin\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 163.954977ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.373728ms
[debug]     Load.loadUnit(file:/C:/Users/admin/.sbt/1.0/plugins/, ...) took 323.056856ms
[debug]   Load.apply: load took 571.086598ms
[debug]   Load.apply: resolveProjects took 12.946154ms
[debug]   Load.apply: finalTransforms took 159.365687ms
[debug]   Load.apply: config.delegates took 17.430408ms
[debug]   Load.apply: Def.make(settings)... took 851.384994ms
[debug]   Load.apply: structureIndex took 167.130449ms
[debug]   Load.apply: mkStreams took 2.236021ms
[info] loading global plugins from C:\Users\admin\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4849.988275ms
[debug]           Load.loadUnit: plugins took 92.741361ms
[debug]           Load.loadUnit: defsScala took 0.094776ms
[debug] [Loading] Scanning directory C:\Users\admin\IdeaProjects\entity_tg\project
[debug]             Load.loadUnit: mkEval took 20.790546ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\admin\IdeaProjects\entity_tg\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.438821 ms
[info] loading settings for project entity_tg-build from idea1.sbt ...
[debug]               Load.resolveProject(entity_tg-build) took 6.644064ms
[debug]             Load.loadTransitive: finalizeProject(Project(id entity_tg-build, base: C:\Users\admin\IdeaProjects\entity_tg\project, plugins: List(<none>))) took 12.678437ms
[debug] [Loading] Done in C:\Users\admin\IdeaProjects\entity_tg\project, returning: (entity_tg-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 424.81509ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.715536ms
[debug]         Load.loadUnit(file:/C:/Users/admin/IdeaProjects/entity_tg/project/, ...) took 532.916451ms
[debug]       Load.apply: load took 540.492638ms
[debug]       Load.apply: resolveProjects took 1.068912ms
[debug]       Load.apply: finalTransforms took 44.466374ms
[debug]       Load.apply: config.delegates took 1.370338ms
[debug]       Load.apply: Def.make(settings)... took 261.521588ms
[debug]       Load.apply: structureIndex took 95.49425ms
[debug]       Load.apply: mkStreams took 0.004885ms
[info] loading project definition from C:\Users\admin\IdeaProjects\entity_tg\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4168.228673ms
[debug]     Load.loadUnit: defsScala took 0.009282ms
[debug] [Loading] Scanning directory C:\Users\admin\IdeaProjects\entity_tg
[debug]       Load.loadUnit: mkEval took 0.387407ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\admin\IdeaProjects\entity_tg, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.810566 ms
[info] loading settings for project entity_tg from build.sbt ...
[debug]         Load.resolveProject(entity_tg) took 53.09291ms
[debug]       Load.loadTransitive: finalizeProject(Project(id entity_tg, base: C:\Users\admin\IdeaProjects\entity_tg, plugins: List(<none>))) took 59.199097ms
[debug] [Loading] Done in C:\Users\admin\IdeaProjects\entity_tg, returning: (entity_tg)
[debug]     Load.loadUnit: loadedProjectsRaw took 7873.4086ms
[debug]     Load.loadUnit: cleanEvalClasses took 27.45122ms
[debug]   Load.loadUnit(file:/C:/Users/admin/IdeaProjects/entity_tg/, ...) took 12070.806179ms
[debug] Load.apply: load took 12075.28164ms
[debug] Load.apply: resolveProjects took 0.267716ms
[debug] Load.apply: finalTransforms took 65.521706ms
[debug] Load.apply: config.delegates took 0.521266ms
[debug] Load.apply: Def.make(settings)... took 260.001759ms
[debug] Load.apply: structureIndex took 69.011305ms
[debug] Load.apply: mkStreams took 0.003908ms
[info] set current project to entity_tg (in build file:/C:/Users/admin/IdeaProjects/entity_tg/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49403 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49403, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to entity_tg (in build file:/C:/Users/admin/IdeaProjects/entity_tg/)
[debug] > Exec(idea-shell, None, None)
